CREATE TABLE t_bookType(
	id int primary key auto_increment,
	bookTypeName varchar(20),
	bookTypeDesc varchar(200)
);#创建表格


CREATE TABLE t_book(
	id int primary key auto_increment,
	bookName varchar(20),
	author varchar(10),
	price decimal(6,2),
	bookTypeId int,
	constraint `fk` foreign key (`bookTypeId`) references `t_bookType`(`id`)
);#创建子，设置外键，将bookTypeId与id关联


desc t_bookType;#查看表基本结构

show create table t_bookType;#查看表详细结构

alter table t_book rename t_book2;#更改表名


alter table t_book change bookName bookName2 varchar(20);#修改字段

alter table t_book add testField int first ;#增加字段

alter table t_book drop testField;#删除字段

drop table t_bookType;#删除表

drop table t_book;

SELECT id,stuName,age,sex,gradeName FROM t_student ;#查询所有字段

SELECT stuName,id,age,sex,gradeName FROM t_student ;#换序查询所有字段

SELECT * FROM t_student;#查询所有字段

SELECT stuName,gradeName FROM t_student;#查询制定字段

SELECT * FROM t_student WHERE id=1;#条件查询，查询id为1的数据

SELECT * FROM t_student WHERE age>22;

SELECT * FROM t_student WHERE age IN (21,23);#查询年龄为21或23的数据
SELECT * FROM t_student WHERE age NOT IN (21,23);

SELECT * FROM t_student WHERE age BETWEEN 21 AND 24;#查询年龄为21到24岁的数据
SELECT * FROM t_student WHERE age NOT BETWEEN 21 AND 24;
##模糊查询
SELECT * FROM t_student WHERE stuName LIKE '张三';#查询结果为“张三”
SELECT * FROM t_student WHERE stuName LIKE '张三%';#%代表任意字符，查询结果为“张三”、“张三丰”、“张三峰小”
SELECT * FROM t_student WHERE stuName LIKE '张三__';#_代表单个字符，查询结果为“张三丰”
SELECT * FROM t_student WHERE stuName LIKE '%张三%';#结果为“小张三”、“小小张三”、“张三”、“张三丰”、“张三峰小”

SELECT * FROM t_student WHERE sex IS NULL;#查询性别空值的数据
SELECT * FROM t_student WHERE sex IS NOT NULL;

SELECT * FROM t_student WHERE gradeName='一年级' AND age=23
SELECT * FROM t_student WHERE gradeName='一年级' OR age=23

SELECT DISTINCT gradeName FROM t_student;#DISTINCT去重复

SELECT * FROM t_student ORDER BY age ASC;#按年龄升序排序
SELECT * FROM t_student ORDER BY age DESC;#按年龄降序排序
##分组查询
SELECT * FROM t_student GROUP BY gradeName;#每个年级只出现一条数据

SELECT gradeName,GROUP_CONCAT(stuName) FROM t_student GROUP BY gradeName;#将各年级的学生姓名分组聚合查询

SELECT gradeName,COUNT(stuName) FROM t_student GROUP BY gradeName;#查询每个年级学生总数
###HAVING限制输出结果
SELECT gradeName,COUNT(stuName) FROM t_student GROUP BY gradeName HAVING COUNT(stuName)>3;#查询年级学生数大于三的年级的学生数
###WITH ROLLUP最后加入一个综合行
SELECT gradeName,COUNT(stuName) FROM t_student GROUP BY gradeName WITH ROLLUP;#查询每个年级学生总数并总计
SELECT gradeName,GROUP_CONCAT(stuName) FROM t_student GROUP BY gradeName WITH ROLLUP;#若为文本则显示所有文本
##LIMIT分页查询
SELECT * FROM t_student LIMIT 0,5;#0为初始数据，5是记录数
SELECT * FROM t_student LIMIT 5,5;
SELECT * FROM t_student LIMIT 10,5;

SELECT COUNT(*) FROM t_grade;#计算所有记录数

SELECT COUNT(*) AS total FROM t_grade;#将所有记录数作为total

SELECT stuName,COUNT(*) FROM t_grade GROUP BY stuName;#按每个学生分组查询每组记录数
###SUM求总和
SELECT stuName,SUM(score) FROM t_grade WHERE stuName="张三";#求张三分数总和

SELECT stuName,SUM(score) FROM t_grade GROUP BY stuName;#求出每个学生分数总和
###AVG求平均
SELECT stuName,AVG(score) FROM t_grade WHERE stuName="张三";

SELECT stuName,AVG(score) FROM t_grade GROUP BY stuName;
###MAX求最大值
SELECT stuName,course,MAX(score) FROM t_grade WHERE stuName="张三";#这里有误，course和最高分不会对应

SELECT stuName,MAX(score) FROM t_grade GROUP BY stuName;
###MIN求最小值
SELECT stuName,course,MIN(score) FROM t_grade WHERE stuName="张三";

SELECT stuName,MIN(score) FROM t_grade GROUP BY stuName;

#连接查询：将两个或两个以上的表按某条件连接起来，从中选取需要的数据
SELECT * FROM t_book,t_bookType;
#内连接查询
SELECT * FROM t_book,t_bookType WHERE t_book.bookTypeId=t_bookType.id;

SELECT bookName,author,bookTypeName FROM t_book,t_bookType WHERE t_book.bookTypeId=t_bookType.id;

SELECT tb.bookName,tb.author,tby.bookTypeName FROM t_book tb,t_bookType tby WHERE tb.bookTypeId=tby.id;#建议使用别名
#外连接查询（可查询其中一表的所有数据）
SELECT * FROM t_book LEFT JOIN t_bookType ON t_book.bookTypeId=t_bookType.id;#左连接

SELECT tb.bookName,tb.author,tby.bookTypeName FROM t_book tb LEFT JOIN t_bookType tby ON tb.bookTypeId=tby.id;


SELECT * FROM t_book RIGHT JOIN t_bookType ON t_book.bookTypeId=t_bookType.id;#右连接

SELECT tb.bookName,tb.author,tby.bookTypeName FROM t_book tb RIGHT JOIN t_bookType tby ON tb.bookTypeId=tby.id;

SELECT tb.bookName,tb.author,tby.bookTypeName FROM t_book tb,t_bookType tby WHERE tb.bookTypeId=tby.id AND tb.price>70;#多条件查询

#子查询
SELECT * FROM t_book WHERE booktypeId IN (SELECT id FROM t_booktype);

SELECT * FROM t_book WHERE booktypeId NOT IN (SELECT id FROM t_booktype);

SELECT * FROM t_book WHERE price>=(SELECT price FROM t_pricelevel WHERE priceLevel=1);

SELECT * FROM t_book WHERE EXISTS (SELECT * FROM t_booktype);#假如子查询查询到记录，则进行外层查询

SELECT * FROM t_book WHERE NOT EXISTS (SELECT * FROM t_booktype);

SELECT * FROM t_book WHERE price>= ANY (SELECT price FROM t_pricelevel);#any表示满足其中任一条件

SELECT * FROM t_book WHERE price>= ALL (SELECT price FROM t_pricelevel);#all表示满足所有条件

#合并查询
SELECT id FROM t_book;

SELECT id FROM t_booktype;

SELECT id FROM t_book UNION SELECT id FROM t_booktype;#将所有查询结果合并到一起，然后去掉相同的记录

SELECT id FROM t_book UNION ALL SELECT id FROM t_booktype;#合并但不去掉相同的记录

#为表和字段取别名
SELECT * FROM t_book WHERE id=1;

SELECT * FROM t_book t WHERE t.id=1;#为表取别名

SELECT t.bookName FROM t_book t WHERE t.id=1;

SELECT t.bookName bName FROM t_book t WHERE t.id=1;

SELECT t.bookName AS bName FROM t_book t WHERE t.id=1;#为字段取别名，可加as也可不加

#插入、更新和删除数据
INSERT INTO t_book VALUES(NULL,'我爱我家',20,'张三',1);#给表的所有字段插入数据

INSERT INTO t_book(id,bookName,price,author,bookTypeId) VALUES(NULL,'我爱我家',20,'张三',1);

INSERT INTO t_book(bookName,author) VALUES('我爱我家','张三');#给表的指定字段插入数据

INSERT INTO t_book(id,bookName,price,author,bookTypeId) VALUES (NULL,'我爱我家2',20,'张三',1),(NULL,'我爱我家3',20,'张三',1);#同时插入多条数据

UPDATE t_book SET bookName='Java编程思想',price=120 WHERE id=1;#更新数据，注意中间用逗号隔开不要用and

UPDATE t_book SET bookName='我' WHERE bookName LIKE '%我爱我家%';

DELETE FROM t_book WHERE id=5;#删除数据

DELETE FROM t_book WHERE bookName='我';

#索引：类似于目录，方便快速定位，寻找指定的内容
##普通索引：可创建在任何数据类型中
##唯一性索引：用unique参数设置，限制该索引的值必须唯一
##全文索引：用fulltext参数设置，只能创建在CHAR、VARCHAR、TEXT类型的字段上。提高较大字符串类型的速度；只有MyISAM引擎支持，MySQL默认引擎不支持
##单/多列索引：给单/多个字段创建索引
##空间索引：用SPATIAL参数设置，只能建立在空间数据类型上，可提高系统获取空间数据的效率
#创建表时创建索引
CREATE TABLE t_user1(id INT ,
                     userName VARCHAR(20),
                     PASSWORD VARCHAR(20),
                     INDEX (userName)
	             );#创建普通索引
	             
CREATE TABLE t_user2(id INT ,
                     userName VARCHAR(20),
                     PASSWORD VARCHAR(20),
                     UNIQUE INDEX index_userName(userName)
	             );#创建唯一性索引
	           
CREATE TABLE t_user3(id INT ,
                     userName VARCHAR(20),
                     PASSWORD VARCHAR(20),
                     INDEX index_userName_password(userName,PASSWORD)
	             );创建多列索引
 #在已经存在的表上创建索引	             
CREATE 	INDEX index_userName ON t_user4(userName);

CREATE 	UNIQUE INDEX index_userName ON t_user4(userName);

CREATE  INDEX index_userName_password ON t_user4(userName,PASSWORD);
#用alter table语句创建索引
ALTER TABLE t_user5 ADD INDEX index_userName(userName);

ALTER TABLE t_user5 ADD UNIQUE INDEX index_userName(userName);

ALTER TABLE t_user5 ADD INDEX index_userName_password(userName,PASSWORD);
#删除索引
DROP INDEX index_userName ON t_user5;

DROP INDEX index_userName_password ON t_user5;

#视图：是一种虚拟的表，没有存放数据，数据存在原表中。增加数据安全性。

CREATE VIEW v1 AS SELECT * FROM t_book;#单表上创建视图

CREATE VIEW v2 AS SELECT bookName,price FROM t_book;

CREATE VIEW v3(b,p) AS SELECT bookName,price FROM t_book;#创建视图并使用别名


SELECT * FROM v1;

SELECT * FROM v2;

SELECT * FROM v3;

CREATE VIEW v4 AS SELECT bookName,bookTypeName FROM t_book,t_booktype WHERE t_book.bookTypeId=t_booktype.id;#多表创建视图

CREATE VIEW v5 AS SELECT tb.bookName,tby.bookTypeName FROM t_book tb,t_booktype tby WHERE tb.bookTypeId=tby.id;#使用别名

SELECT * FROM v4;

SELECT * FROM v5;

DESC v5;#查看视图基本信息

SHOW TABLE STATUS LIKE 'v5';#查看视图基本信息

SHOW TABLE STATUS LIKE 't_book';

SHOW CREATE VIEW v5;#查看视图详细信息

SELECT  * FROM v1;

CREATE OR REPLACE VIEW v1(bookName,price) AS SELECT bookName,price FROM t_book;#修改视图

ALTER VIEW v1 AS SELECT * FROM t_book;#修改视图
#更新视图，视图是个虚拟的表,其中没有数据。通过视图更新时，都是转换基本表来更新。更新时只能更新权限范围内的数据。
INSERT INTO v1 VALUES(NULL,'java good',120,'feng',1);#插入新的数据到视图中

UPDATE v1 SET bookName='java very good',price=200 WHERE id=5;#更改视图中的数据

DELETE FROM v1 WHERE id=5;#删除视图中的数据

DROP VIEW IF EXISTS v4;#删除视图
#触发器：由事件来触发某个操作。这些事件包括INSERT、UPDATE、DELETE语句
CREATE TRIGGER trig_book AFTER INSERT 
     ON t_book FOR EACH ROW
        UPDATE t_bookType SET bookNum=bookNum+1 WHERE new.bookTypeId=t_booktype.id;#创建触发器，插入新的数据后将该图书的图书类别的书数量+1，
	 #其中new是一个过渡变量
        
        
INSERT INTO t_book VALUES(NULL,'java好',100,'ke',1);



DELIMITER |  #定义分隔符，到该符号才执行
CREATE TRIGGER trig_book2 AFTER DELETE 
    ON t_book FOR EACH ROW
    BEGIN
       UPDATE t_bookType SET bookNum=bookNum-1 WHERE old.bookTypeId=t_booktype.id;
       INSERT INTO t_log VALUES(NULL,NOW(),'在book表里删除了一条数据');
       DELETE FROM t_test WHERE old.bookTypeId=t_test.id;
    END 
|  #创建多个执行语句的触发器，执行三个语句
DELIMITER ;

DELETE FROM t_book WHERE id=5;

SHOW TRIGGERS;#查看触发器

DROP TRIGGER trig_book2 ;#删除触发器

SELECT CURDATE(),CURTIME(),MONTH(birthday) AS m FROM t_t;#获得当前日期、时间，获得月份

SELECT userName,CHAR_LENGTH(userName),UPPER(userName),LOWER(userName) FROM t_t;#计算字符串函数、把所有字母变大写，把所有字母变小写

SELECT num,ABS(num) FROM t_t;#求绝对值

SELECT SQRT(4),MOD(9,4) FROM t_t;#求平方根、求余

INSERT INTO t_t VALUES(NULL,'2013-1-1','a',1,PASSWORD('123456'));#一般对用户的密码加密，不可逆

INSERT INTO t_t VALUES(NULL,'2013-1-1','a',1,MD5('123456'));#普通加密，不可逆

INSERT INTO t_t VALUES(NULL,'2013-1-1','a',1,MD5('123456'),ENCODE('abcd','aa'));#加密函数，结果是一个二进制数，必须用BLOB类型的字段来保存 

SELECT DECODE(pp,'aa') FROM t_t WHERE id=5;

DELIMITER &&
CREATE PROCEDURE pro_book ( IN bT INT,OUT count_num INT)
   READS SQL DATA
   BEGIN 
     SELECT COUNT(*) FROM t_book WHERE bookTypeId=bT;
   END 
   &&
DELIMITER ;#创建过程，输入图书类别ID，输出该类别图书数量

CALL pro_book(1,@total);


DELIMITER &&
CREATE FUNCTION func_book (bookId INT)
 RETURNS VARCHAR(20)
 BEGIN 
  RETURN ( SELECT bookName FROM t_book WHERE id=bookId );
 END 
    &&
DELIMITER ;#创建函数，根据图书ID查询书名

SELECT func_book(2);

DELIMITER &&
CREATE PROCEDURE pro_user()
	BEGIN
	 DECLARE a,b VARCHAR(20) ;
	 INSERT INTO t_user VALUES(NULL,a,b);
	END 
&&
DELIMITER ;#定义变量

DELIMITER &&
CREATE PROCEDURE pro_user2()
	BEGIN
	 DECLARE a,b VARCHAR(20) ;
	 SET a='java1234',b='123456';
	 INSERT INTO t_user VALUES(NULL,a,b);
	END 
&&
DELIMITER ;#为变量赋值，直接赋值

DELIMITER &&
CREATE PROCEDURE pro_user3()
	BEGIN
	 DECLARE a,b VARCHAR(20) ;
	 SELECT userName2,password2 INTO a,b FROM t_user2 WHERE id2=1;
	 INSERT INTO t_user VALUES(NULL,a,b);
	END 
&&
DELIMITER ;#为变量赋值，查询后赋值

DELIMITER &&
CREATE PROCEDURE pro_user4()
	BEGIN
	 DECLARE a,b VARCHAR(20) ;
	 DECLARE cur_t_user2 CURSOR FOR SELECT userName2,password2 FROM t_user2;
	 OPEN cur_t_user2;
	 FETCH cur_t_user2 INTO a,b;
	 INSERT INTO t_user VALUES(NULL,a,b);
	 CLOSE cur_t_user2;
	END 
&&
DELIMITER ;#声明游标、打开游标、使用游标、关闭游标

DELIMITER &&
CREATE PROCEDURE pro_user5(IN bookId INT)
	BEGIN
	 SELECT COUNT(*) INTO @num FROM t_user WHERE id=bookId;
	 IF @num>0 THEN UPDATE t_user SET userName='java12345' WHERE id=bookId;
	 ELSE
	   INSERT INTO t_user VALUES(NULL,'2312312','2321312');
	 END IF ;
	END 
&&
DELIMITER ;#IF语句

DELIMITER &&
CREATE PROCEDURE pro_user6(IN bookId INT)
	BEGIN
	 SELECT COUNT(*) INTO @num FROM t_user WHERE id=bookId;
	 CASE @num
	  WHEN 1 THEN UPDATE t_user SET userName='java12345' WHERE id=bookId;
	  WHEN 2 THEN INSERT INTO t_user VALUES(NULL,'2312312','2321312');
	  ELSE INSERT INTO t_user VALUES(NULL,'231231221321312','2321312321312');
	 END CASE ;
	END 
&&
DELIMITER ;#Case语句


DELIMITER &&
CREATE PROCEDURE pro_user7(IN totalNum INT)
	BEGIN
	  aaa:LOOP
	    SET totalNum=totalNum-1;
	    IF totalNum=0 THEN LEAVE aaa ;
	    ELSE INSERT INTO t_user VALUES(totalNum,'2312312','2321312');
	    END IF ;
	  END LOOP aaa ;
	END 
&&
DELIMITER ;#LOOP，leave语句，LOOP可使某些特定语句重复执行，实现一个简单的循环。但其本身没有停止循环的语句，必须用leave语句停止循环



DELIMITER &&
CREATE PROCEDURE pro_user8(IN totalNum INT)
	BEGIN
	  aaa:LOOP
	    SET totalNum=totalNum-1;
	    IF totalNum=0 THEN LEAVE aaa ;
	    ELSEIF totalNum=3 THEN ITERATE aaa ;
	    END IF ;
	    INSERT INTO t_user VALUES(totalNum,'2312312','2321312');
	  END LOOP aaa ;
	END 
&&
DELIMITER ;#ITERATE是跳出本次循环的语句

DELIMITER &&
CREATE PROCEDURE pro_user9(IN totalNum INT)
	BEGIN
	  REPEAT
	     SET totalNum=totalNum-1;
	     INSERT INTO t_user VALUES(totalNum,'2312312','2321312');
	     UNTIL totalNum=1 
	  END REPEAT;
	END 
&&
DELIMITER ;#REPEAT是you有条件控制循环语句，满足特定条件时就会跳出循环语句。

DELIMITER &&
CREATE PROCEDURE pro_user10(IN totalNum INT)
	BEGIN
	 WHILE totalNum>0 DO
	  INSERT INTO t_user VALUES(totalNum,'2312312','2321312');
	  SET totalNum=totalNum-1;
	 END WHILE ;
	END 
&&
DELIMITER ;WHILE语句

CALL pro_user();

CALL pro_user2();

CALL pro_user3();

CALL pro_user4();

CALL pro_user5(5);

CALL pro_user6(6);

CALL pro_user7(11);

CALL pro_user8(11);

CALL pro_user9(11);

CALL pro_user10(10);


DELETE FROM t_user;
SHOW PROCEDURE STATUS LIKE 'pro_book';

SHOW CREATE PROCEDURE pro_book;

ALTER PROCEDURE pro_book  COMMENT '我来测试一个COMMENT';

DROP PROCEDURE pro_user3;

mysqldump -u root -p db_book > c:\db_book.sql
